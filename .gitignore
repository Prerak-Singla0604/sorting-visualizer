<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sorting Visualizer</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: Roboto,arial;
            text-align: center;
            background-color: f4f4f4;
            margin: 0;
            padding: 0;
            color: rgb(51, 51, 51);
        }

       .array-bar {
            width: 20px;
            background-color: black ;
            margin: 0 2px;
            display: inline-block;
        }
        button{
            
            margin: 4px 8px;
            margin-top:40px;
            border: solid;
            border-width: 1px;
            border-radius: 4px;
            font-size: 20px;
            padding: 4px 8px;
            color: white;
            background-color: rgb(51, 51, 51);
        }
        .array-class{
            display: flex;
            padding :20px 40px;
            
            margin-top: 0px;
        }
        #array {
            margin: 20px auto;
            border: solid;
            padding: 20px 40px;
        }
        header {
            background: rgb(51, 51, 51);
            color: #fff;
            padding: 1em 0;
            /* text-align: center; */
            /* margin: 0; */
        }
        h1 {
            margin: 0;
            font-size: 50px;
        }
        
        main {
            padding: 1em;
            max-width: 1200px;    
            margin: 0 auto;
            background: #fff;
            display: flex;
            justify-content: space-between;
            /* align-items: start; */
        }
        section{
            border: solid;
            border-width: 1px;
            padding: 10px 20px;
            margin-left:10px;
            flex: 1;
        }
        .bubble-sort,.insertion-sort,.selection-sort{
            flex: 1;
        }
        h2 {
            color: #333;
            margin: 0;
            padding: 0;
            text-align: start;
        }
        h3{
            margin: 0;
            padding: 0;
            text-align: start;
        }
        .pointers{
            display: flex;
            flex-direction: column;
        }
        .pointers li{
            text-align: start;
            margin: 0;
            padding: 0;
        }
        
        /* .visual-aid img {
            max-width: 100%;
            height: auto;
        } */
        
        pre {
            background: #eee;
            padding: 1em;
            overflow-x: auto;
        }
        .bubble_desc, .insertion_desc, .selection_desc{
            /* border: solid; */
            text-align: start;
            width: 350px;
        }
        
    </style>
</head>
<body>
    <header>
        <h1>Sorting Visualizer</h1>
      </header>
    <button id="generate-array">Generate Array</button>
    <button id="insertion-sort">Insertion Sort</button>
    <button id="bubble-sort">Bubble Sort</button>
    <button id="selection-sort">Selection Sort</button>
    <div class="array-class">
        <div id="array"></div>
    </div>
    <main>
    <section id="bubble-sort" >
        <h2>Bubble Sort</h2>
        <p class="bubble_desc">Bubble sort is a simple sorting algorithm that works by repeatedly stepping through the list, comparing adjacent elements, and swapping them if they are in the wrong order. It is known for its simplicity but is inefficient for large datasets due to its O(n^2) time complexity.</p>
        <!-- <div class="visual-aid">
          <img src="bubble-sort-animation.gif" alt="Bubble Sort Animation">
        </div> -->
        <h3>Time Complexity:</h3>
        <ul class="pointers">
          <li>Best: O(n)</li>
          <li>Average: O(n^2)</li>
          <li>Worst: O(n^2)</li>
        </ul>
        <h3>Code Snippet (Python):</h3>
        <pre style="text-align: start;margin: 0;padding:0;"><code style="margin: 0;padding:0;">
    def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i + 1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]
        </code></pre>
        <h3>References and Further Reading:</h3>
      <ul style="text-align: start;">
        <li><a href="https://en.wikipedia.org/wiki/Bubble_sort">Bubble Sort - Wikipedia</a></li>
        <li><a href="https://www.geeksforgeeks.org/bubble-sort/">Bubble Sort - GeeksforGeeks</a></li>
        <li><a href="https://www.tutorialspoint.com/data_structures_algorithms/bubble_sort_algorithm.htm">Bubble Sort - TutorialsPoint</a></li>
      </ul>
      </section>
      <section id="insertion-sort">
        <h2>Insertion Sort</h2>
        <p class="insertion_desc">Insertion sort is a simple sorting algorithm that builds the final sorted array one item at a time. It iterates through the list, removes one element at a time, and inserts it into its correct position. It is efficient for small datasets but becomes inefficient for large datasets due to its O(n^2) time complexity</p>
        <!-- <div class="visual-aid">
          <img src="bubble-sort-animation.gif" alt="Bubble Sort Animation">
        </div> -->
        <h3>Time Complexity:</h3>
        <ul class="pointers">
          <li>Best: O(n)</li>
          <li>Average: O(n^2)</li>
          <li>Worst: O(n^2)</li>
        </ul>
        <h3>Code Snippet (Python):</h3>
        <pre style="text-align: start;margin: 0;padding:0;"><code >
    def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
        </code></pre>
        <h3>References and Further Reading:</h3>
      <ul style="text-align: start;">
        <li><a href="https://en.wikipedia.org/wiki/Insertion_sort">insertion sort - Wikipedia</a></li>
        <li><a href="https://www.geeksforgeeks.org/insertion-sort/">insertion sort - GeeksforGeeks</a></li>
        <li><a href="https://www.tutorialspoint.com/data_structures_algorithms/insertion_sort_algorithm.htm">insertion sort - TutorialsPoint</a></li>
      </ul>
      </section>
      <section id="selection-sort">
        <h2>Selection Sort</h2>
        <p class="selection_desc">Selection sort is a simple sorting algorithm that divides the input list into a sorted and an unsorted region. It repeatedly selects the smallest (or largest) element from the unsorted region and swaps it with the first unsorted element. It has an O(n^2) time complexity and is typically used for small datasets.</p>
        <!-- <div class="visual-aid">
          <img src="bubble-sort-animation.gif" alt="Bubble Sort Animation">
        </div> -->
        <h3>Time Complexity:</h3>
        <ul class="pointers">
          <li>Best: O(n^2)</li>
          <li>Average: O(n^2)</li>
          <li>Worst: O(n^2)</li>
        </ul>
        <h3>Code Snippet (Python):</h3>
        <pre style="text-align: start;start;margin: 0;padding:0;"><code >
  def bubble_sort(arr):
      n = len(arr)
      for i in range(n):
          for j in range(0, n-i-1):
              if arr[j] > arr[j+1]:
                  arr[j], arr[j+1] = arr[j+1], arr[j]
        </code></pre>
        <h3>References and Further Reading:</h3>
      <ul style="text-align: start;">
        <li><a href="https://en.wikipedia.org/wiki/Selection_sort">Selection Sort - Wikipedia</a></li>
        <li><a href="https://www.geeksforgeeks.org/selection-sort-algorithm-2/">Selection Sort - GeeksforGeeks</a></li>
        <li><a href="https://www.tutorialspoint.com/data_structures_algorithms/selection_sort_algorithm.htm">Selection Sort - TutorialsPoint</a></li>
      </ul>
      </section>
    </main>
    <script>
        let array = [];
        let arrayBars = [];
        let sorting = false;

        function generateArray() {
            if (sorting) return;
            sorting = true;
            array = [];
            arrayBars = [];
            for (let i = 0; i < 20; i++) {
                array.push(Math.floor(Math.random() * 100) + 1);
            }
            renderArray();
            sorting = false;
        }

        function renderArray() {
            const arrayContainer = document.getElementById("array");
            arrayContainer.innerHTML = "";
            arrayBars = [];
            for (let i = 0; i < array.length; i++) {
                const arrayBar = document.createElement("div");
                arrayBar.className = "array-bar";
                arrayBar.style.height = `${array[i]}px`;
                arrayContainer.appendChild(arrayBar);
                arrayBars.push(arrayBar);
            }
        }

        async function insertionSort() {
            if (sorting) return;
            sorting = true;
            disableButtons();
            for (let i = 1; i < array.length; i++) {
                let key = array[i];
                let j = i - 1;
                while (j >= 0 && array[j] > key) {
                    array[j + 1] = array[j];
                    j--;
                }
                array[j + 1] = key;
                updateArrayBars();
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            sorting = false;
            enableButtons();
        }

        async function bubbleSort() {
            if (sorting) return;
            sorting = true;
            disableButtons();
            for (let i = 0; i < array.length - 1; i++) {
                for (let j = 0; j < array.length - i - 1; j++) {
                    if (array[j] > array[j + 1]) {
                        let temp = array[j];
                        array[j] = array[j + 1];
                        array[j + 1] = temp;
                    }
                    updateArrayBars();
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
            }
            sorting = false;
            enableButtons();
        }

        async function selectionSort() {
            if (sorting) return;
            sorting = true;
            disableButtons();
            for (let i = 0; i < array.length - 1; i++) {
                let minIndex = i;
                for (let j = i + 1; j < array.length; j++) {
                    if (array[j] < array[minIndex]) {
                        minIndex = j;
                    }
                }
                let temp = array[minIndex];
                array[minIndex] = array[i];
                array[i] = temp;
                updateArrayBars();
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            sorting = false;
            enableButtons();
        }

        function updateArrayBars() {
            for (let i = 0; i < array.length; i++) {
                arrayBars[i].style.height = `${array[i]}px`;
            }
        }

        function disableButtons() {
            document.getElementById("generate-array").disabled = true;
            document.getElementById("insertion-sort").disabled = true;
            document.getElementById("bubble-sort").disabled = true;
            document.getElementById("selection-sort").disabled = true;
        }

        function enableButtons() {
            document.getElementById("generate-array").disabled = false;
            document.getElementById("insertion-sort").disabled = false;
            document.getElementById("bubble-sort").disabled = false;
            document.getElementById("selection-sort").disabled = false;
        }

        document.getElementById("generate-array").addEventListener("click", generateArray);
        document.getElementById("insertion-sort").addEventListener("click", insertionSort);
        document.getElementById("bubble-sort").addEventListener("click", bubbleSort);
        document.getElementById("selection-sort").addEventListener("click", selectionSort);

        generateArray();
    </script>
</body>
